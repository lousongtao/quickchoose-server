/*
 * File: app/controller/AccountController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('digitalmenu.controller.AccountController', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            ref: 'loginView',
            selector: '#loginView'
        },
        {
            ref: 'accountGrid',
            selector: '#accountListContainer #accountListGrid'
        }
    ],

    onSaveAccountTest: function(button, e, eOpts) {
        Ext.MessageBox.confirm(
            "confirm",
            "test",
            function(btnId){
                var win = button.up('form').up('window');
                win.close();
            }
        );
    },

    onLoginClick: function(button, e, eOpts) {
        var form = button.up('form'),
          values = form.getValues(),
          loginView = this.getLoginView();

        var successCallback = function(resp, ops) {
          var result = Ext.decode(resp.responseText);

          if (result.result == 'ok') {
            Ext.util.Cookies.set("userId", result.userId);
            Ext.util.Cookies.set("sessionId", result.sessionId);

            loginView.destroy();

            Ext.create('digitalmenu.view.MainView');
          } else {
            Ext.Msg.alert("登录失败", result.result);
          }
        };

        var failureCallback = function(resp, ops) {
          Ext.Msg.alert("登录失败", resp);
        };

        Ext.Ajax.request({
          url: "login",
          params: values,
          success: successCallback,
          failure: failureCallback
        });

    },

    onAddAccountClick: function(button, e, eOpts) {
        var p = Ext.create('digitalmenu.view.AddUpdateAccountForm',{
            title: 'Add User'

        });

        p.down('#btnSaveForAdd').hidden = false;
        p.down('#btnSaveForUpdate').hidden = true;

        var permissionGrid = p.down('#permissionGrid');
        permissionGrid.store.load();

        var win = Ext.create('Ext.window.Window',{

            height: 550,
            width: 460,
        	header: false,
        	modal: true,
            border: false,
        	items:[
                p
        	]

        });

        win.show();

    },

    onSaveAddAccountClick: function(button, e, eOpts) {
        var form = button.up('form');
        var grid = form.down('#permissionGrid');
        var values = form.getValues();
        var accountGrid = this.getAccountGrid();

        if (values.username.length < 4){
            Ext.Msg.alert("Error","The input user name is too short.");
            return;
        }
        if (values.password.length < 4 || values.passwordAgain.length < 4){
            Ext.Msg.alert("Error","The input password is too short.");
            return;
        }

        if (values.password != values.passwordAgain){
            Ext.Msg.alert("Error","The input password are difference, Please input again");
            return;
        }

        var permission = "";
        for(var i =0; i< grid.store.getCount(); i++){
            if (grid.store.getAt(i).get('choosed')){
                if (permission.length !== 0)
                    permission +="/";
                permission += grid.store.getAt(i).get('id');
            }
        }

        if (permission.length === 0){
            Ext.Msg.alert("Error","You should select correspond PERMISSION for user.");
            return;
        }

        values.userId = Ext.util.Cookies.get("userId");
        values.sessionId = Ext.util.Cookies.get("sessionId");
        values.permission = permission;

        var successCallback = function(resp, ops) {
          var result = Ext.decode(resp.responseText);

          if (result.result == 'ok') {
              Ext.Msg.alert("SUCCESS","添加账号成功");
              accountGrid.store.load();
              var win = button.up('form').up('window');
              win.close();
          } else if (result.result == 'invalid_session') {
            digitalmenu.getApplication().onSessionExpired();
          } else {
            Ext.Msg.alert("添加账号失败", resp.responseText);
          }
        };

        var failureCallback = function(resp, ops) {
          Ext.Msg.alert("添加账号失败", resp.responseText);
        };

        Ext.Ajax.request({
          url: "account/add",
          params: values,
          success: successCallback,
          failure: failureCallback
        });

    },

    onCancelAccountClick: function(button, e, eOpts) {
        Ext.MessageBox.confirm(
            "Confirm",
            "Will you give up all the data input in this form?",
            function(btnId){
                if (btnId == 'no')
                    return;
                var win = button.up('form').up('window');
                win.close();
            }
        );


    },

    onSaveUpdateAccountClick: function(button, e, eOpts) {
        var form = button.up('form');
        var grid = form.down('#permissionGrid');
        var values = form.getValues();
        var accountGrid = this.getAccountGrid();

        if (values.username.length < 4){
            Ext.Msg.alert("Error","The input user name is too short.");
            return;
        }

        var permission = "";
        for(var i =0; i< grid.store.getCount(); i++){
            if (grid.store.getAt(i).get('choosed')){
                if (permission.length !== 0)
                    permission +="/";
                permission += grid.store.getAt(i).get('id');
            }
        }

        if (permission.length === 0){
            Ext.Msg.alert("Error","You should select correspond PERMISSION for user.");
            return;
        }

        values.userId = Ext.util.Cookies.get("userId");
        values.sessionId = Ext.util.Cookies.get("sessionId");
        values.permission = permission;

        var successCallback = function(resp, ops) {
          var result = Ext.decode(resp.responseText);

          if (result.result == 'ok') {
              Ext.Msg.alert("SUCCESS","Update account successfully");
              accountGrid.store.load();
              var win = button.up('form').up('window');
              win.close();
          } else if (result.result == 'invalid_session') {
            digitalmenu.getApplication().onSessionExpired();
          } else {
            Ext.Msg.alert("Failed to update account", result.result);
          }
        };

        var failureCallback = function(resp, ops) {
          Ext.Msg.alert("Failed to update account", resp.responseText);
        };

        Ext.Ajax.request({
          url: "account/modify",
          params: values,
          success: successCallback,
          failure: failureCallback
        });
    },

    init: function(application) {
        this.control({
            "#addUpdateAccountForm #btnTest": {
                click: this.onSaveAccountTest
            },
            "#loginView #loginBtn": {
                click: this.onLoginClick
            },
            "#accountListContainer #btnAdd": {
                click: this.onAddAccountClick
            },
            "#addUpdateAccountForm #btnSaveForAdd": {
                click: this.onSaveAddAccountClick
            },
            "#addUpdateAccountForm #btnCancel": {
                click: this.onCancelAccountClick
            },
            "#addUpdateAccountForm #btnSaveForUpdate": {
                click: this.onSaveUpdateAccountClick
            }
        });
    }

});
