/*
 * File: app/controller/MenuController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('digitalmenu.controller.MenuController', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            ref: 'menuContainer',
            selector: '#menuContainer'
        },
        {
            ref: 'tabCategory1',
            selector: '#menuContainer #tabCategory1'
        },
        {
            ref: 'tabCategory2',
            selector: '#menuContainer #tabCategory2'
        },
        {
            ref: 'tabDish',
            selector: '#menuContainer #tabDish'
        },
        {
            ref: 'treeMenu',
            selector: '#menuContainer #treeMenu'
        },
        {
            ref: 'cbCategory1',
            selector: '#menuContainer #tabCategory2 #cbCategory1ID'
        },
        {
            ref: 'cbCategory2',
            selector: '#menuContainer #tabDish #cbCategory2ID'
        }
    ],

    onAddMenuItemAction: function(button, e, eOpts) {
        //show buttons
        this.showSaveCancelButtons(true);
        this.getTabCategory1().down('#btnSaveOldCategory1').hide();
        this.getTabCategory2().down('#btnSaveOldCategory2').hide();
        this.getTabDish().down('#btnSaveOldDish').hide();
        //hide image component in dish tab
        this.getTabDish().down('#dishPicture').show();
        this.getTabDish().down('#image').show();

        //clean data
        this.cleanComponentValue();

        this.getTabDish().down('#dishPicture').show();

        //重置一级目录和二级目录的下拉框store并重新生成picker, 即下拉列表
        //this.setStoreForCategory1ComboBox();
        //this.getTabCategory2().down('#cbCategory1ID').createPicker();
        //this.setStoreForCategory2ComboBox();
        //this.getTabDish().down('#cbCategory2ID').createPicker();
    },

    onModifyMenuItemAction: function(button, e, eOpts) {
        var sm = this.getTreeMenu().getSelectionModel();
        if (sm.getSelection() === null || sm.getSelection().length === 0){
            return;
        }

        var record = sm.getSelection()[0];

        //show save button
        this.showSaveCancelButtons(true);
        this.getTabCategory1().down('#btnSaveNewCategory1').hide();
        this.getTabCategory2().down('#btnSaveNewCategory2').hide();
        this.getTabDish().down('#btnSaveNewDish').hide();

        this.getTabDish().down('#dishPicture').hide();

        //重置一级目录和二级目录的下拉框store并重新生成picker, 即下拉列表
        //this.setStoreForCategory1ComboBox();
        //this.getTabCategory2().down('#cbCategory1ID').createPicker();
        //this.setStoreForCategory2ComboBox();
        //this.getTabDish().down('#cbCategory2ID').createPicker();

        //把当前选择节点的信息写入控件中
        this.showNodeInfoInForm(record);
    },

    onDeleteMenuItemAction: function(button, e, eOpts) {
        var sm = this.getTreeMenu().getSelectionModel();
        if (sm.getSelection() === null || sm.getSelection().length ===0){
            return;
        }

        var record = sm.getSelection()[0];

        if (record.hasChildNodes()){
            Ext.MessageBox.alert("Error", "Cannot delete this category for having dish still.");
            return;
        }

        var tree = this.getTreeMenu();
        var menuContainer = this.getMenuContainer();

        var values = {
            userId : Ext.util.Cookies.get('userId'),
            sessionId : Ext.util.Cookies.get('sessionId'),
            objectId : record.get('objectid'),
            objectType : record.get('level')
        };

        var successCallback = function(resp, opts){
            var result = Ext.decode(resp.responseText);
            if (result.result == 'ok') {
                Ext.Msg.alert("Successful", 'Delete ' + record.get('chineseName') + ' successfully.');
                //tree.store.reload();
                record.parentNode.removeChild(record);
                //refresh combobox store
                if (record.get('level') == 'C1'){
                  menuContainer.down('#cbCategory1ID').store.load();
                }
                if (record.get('level') == 'C2'){
                    menuContainer.down('#cbCategory2ID').store.load();
                }

            } else if (result.result == 'invalid_session') {
              digitalmenu.getApplication().onSessionExpired();
            } else {
              Ext.Msg.alert("Failed", result.result);
            }
        };

        var failureCallback = function(resp, opts){
            Ext.Msg.alert("Failed", resp);
        };

        Ext.MessageBox.confirm("Confirm", "Do you want to delete " + record.get('chineseName')+"?",
            function(btnId){
                if (btnId == 'no')
                    return;
                Ext.Ajax.request({
                    url: "menu/delete",
                    params: values,
                    success: successCallback,
                    failure: failureCallback
                });
        });


    },

    onSaveNewCategory1Click: function(button, e, eOpts) {
        var namecn = this.getTabCategory1().down('#tfCategory1CN').getValue();
        var nameen = this.getTabCategory1().down('#tfCategory1EN').getValue();
        var seq = this.getTabCategory1().down('#nfCategory1Seq').getValue();
        var tree = this.getTreeMenu();

        var values = {
            userId : Ext.util.Cookies.get("userId"),
            sessionId : Ext.util.Cookies.get("sessionId"),
            chineseName : namecn,
            englishName : nameen,
            sequence : seq
        };

        //把保存成功的节点插入树中
        var addNewNode = function(newid){
            //根据sequence找到大于等于新节点的node, 作为插入位置
            var insertposition = tree.getRootNode().childNodes.length;//default value using the biggest one
            for(var i = 0; i < tree.getRootNode().childNodes.length; i++){
                if (tree.getRootNode().getChildAt(i).get('sequence') >= seq){
                    insertposition = i;
                    break;
                }
            }

            tree.getRootNode().insertChild(insertposition, {
                objectid : newid,
                level : 'C1',
                //iconCls : 'menutreenode-icon-size',
                //icon : '../dishimage_small/catalog1.png',
                chineseName : namecn,
                englishName : nameen,
                displayText : namecn,
                sequence : seq,
                loaded : true,
                expanded : true
            });
        };
        var me =this;
        var menuContainer = this.getMenuContainer();

        Ext.Ajax.request({
            url: "menu/add_category1",
            params : values,
            success: function(resp){
                var result = Ext.decode(resp.responseText);

                if(result.result =='ok'){
                    Ext.Msg.alert("SUCCESS", "Create category1 successfully.");
                    //insert new node
                    addNewNode(result.data.id);
                    //hide SAVE button and CANCEL button
                    me.showSaveCancelButtons(false);
                    //refresh combobox store
                    menuContainer.down('#cbCategory1ID').store.load();

                } else if (result.result =='invalid_session'){
                    digitalmenu.getApplication().onSessionExpired();
                } else {
                    Ext.Msg.alert('Failed',"Failed to create Category1.", resp.responseText);
                }
            },
            failure: function(resp){
                Ext.Msg.alert('Failed',"Failed to create Category1.", resp.responseText);
            }
        });
    },

    onSaveOldCategory1Click: function(button, e, eOpts) {
        var namecn = this.getTabCategory1().down('#tfCategory1CN').getValue();
        var nameen = this.getTabCategory1().down('#tfCategory1EN').getValue();
        var seq = this.getTabCategory1().down('#nfCategory1Seq').getValue();
        var id = this.getTabCategory1().down('#nfID').getValue();
        var tree = this.getTreeMenu();

        var values = {
            userId : Ext.util.Cookies.get("userId"),
            sessionId : Ext.util.Cookies.get("sessionId"),
            chineseName : namecn,
            englishName : nameen,
            id : id,
            sequence : seq
        };

        //保存成功后重置node属性
        var revalueNode = function(){
            var node = tree.getRootNode().findChild('objectid', id);

            if(seq != node.sequence){
                tree.getRootNode().removeChild(node);
                //根据sequence找到大于等于seq的node, 作为插入位置
                var insertposition = tree.getRootNode().childNodes.length;//default value using the biggest one
                for(var i = 0; i < tree.getRootNode().childNodes.length; i++){
                    if (tree.getRootNode().getChildAt(i).get('sequence') >= seq){
                        insertposition = i;
                        break;
                    }
                }
                tree.getRootNode().insertChild(insertposition, node);
            }
            node.set('chineseName', namecn);
            node.set('englishName', nameen);
            node.set('sequence',seq);
        };

        var me =this;
        Ext.Ajax.request({
            url: "menu/update_category1",
            params : values,
            success: function(resp){
                var result = Ext.decode(resp.responseText);

                if(result.result =='ok'){
                    Ext.Msg.alert("SUCCESS","Update category1 successfully.");
                    //refresh node value
                    revalueNode();
                    //hide SAVE button and CANCEL button
                    me.showSaveCancelButtons(false);
                } else if (result.result =='invalid_session'){
                    digitalmenu.getApplication().onSessionExpired();
                } else {
                    Ext.Msg.alert('Failed',"Failed to update Category1.", resp.responseText);
                }
            },
            failure: function(resp){
                Ext.Msg.alert('Failed',"Failed to update Category1.", resp.responseText);
            }
        });
    },

    onSaveNewCategory2Click: function(button, e, eOpts) {
        var namecn = this.getTabCategory2().down('#tfCategory2CN').getValue();
        var nameen = this.getTabCategory2().down('#tfCategory2EN').getValue();
        var seq = this.getTabCategory2().down('#nfCategory2Seq').getValue();
        var category1ID = this.getTabCategory2().down('#cbCategory1ID').getValue();
        var printerId = this.getTabCategory2().down('#cbPrinter').getValue();
        var tree = this.getTreeMenu();

        if (category1ID < 0){
            Ext.Msg.alert("Error", "Must select one Category1");
            return;
        }

        var values = {
            userId : Ext.util.Cookies.get("userId"),
            sessionId : Ext.util.Cookies.get("sessionId"),
            chineseName : namecn,
            englishName : nameen,
            printerId : printerId,
            sequence : seq,
            category1Id : category1ID
        };

        //把保存成功的节点插入树中
        var addNewNode = function(newid){
            //find category1 node, 由于objectid在不同的表中有相同记录的,所以要设置deep=false, 不查找子节点,
            var parentNode = tree.getRootNode().findChild('objectid', category1ID, false);
            //根据sequence找到大于等于新节点的node, 作为插入位置
            var insertposition = parentNode.childNodes.length;//default value using the biggest one
            for(var i = 0; i < parentNode.childNodes.length; i++){
                if (parentNode.getChildAt(i).get('sequence') >= seq){
                    insertposition = i;
                    break;
                }
            }

            parentNode.insertChild(insertposition, {
                objectid : newid,
                chineseName : namecn,
                englishName : nameen,
                displayText : namecn,
                parentID : category1ID,
                printerId : printerId,
                sequence : seq,
                level: 'C2',
                //iconCls : 'menutreenode-icon-size',
                //icon : '../dishimage_small/catalog2.png',
                loaded : true,
                expanded : true
            });
        };

        var me =this;
        var menuContainer = this.getMenuContainer();

        Ext.Ajax.request({
            url: "menu/add_category2",
            params : values,
            success: function(resp){
                var result = Ext.decode(resp.responseText);

                if(result.result =='ok'){
                    Ext.Msg.alert("SUCCESS","Create category2 successfully.");
                    //insert new node
                    addNewNode(result.data.id);
                    //hide SAVE button and CANCEL button
                    me.showSaveCancelButtons(false);
                    //refresh combobox store
                    menuContainer.down('#cbCategory2ID').store.load();
                } else if (result.result =='invalid_session'){
                    digitalmenu.getApplication().onSessionExpired();
                } else {
                    Ext.Msg.alert('Failed',"Failed to create Category2.", resp.responseText);
                }
            },
            failure: function(resp){
                Ext.Msg.alert('Failed',"Failed to create Category2.", resp.responseText);
            }
        });
    },

    onSaveOldCategory2Click: function(button, e, eOpts) {
        var namecn = this.getTabCategory2().down('#tfCategory2CN').getValue();
        var nameen = this.getTabCategory2().down('#tfCategory2EN').getValue();
        var seq = this.getTabCategory2().down('#nfCategory2Seq').getValue();
        var id = this.getTabCategory2().down('#nfID').getValue();
        var printerId = this.getTabCategory2().down('#cbPrinter').getValue();
        var category1ID = this.getTabCategory2().down('#cbCategory1ID').getValue();
        var tree = this.getTreeMenu();

        if (category1ID < 0){
            Ext.Msg.alert("Error", "Must select one Category1");
            return;
        }

        var values = {
            userId : Ext.util.Cookies.get("userId"),
            sessionId : Ext.util.Cookies.get("sessionId"),
            chineseName : namecn,
            englishName : nameen,
            sequence : seq,
            printerId : printerId,
            id : id,
            category1Id : category1ID
        };

        //保存成功后重置node属性
        var revalueNode = function(){

            //根据ID找到当前Node以及修改前的parentNode
            var node = tree.getRootNode().findChildBy(function(treenode){
                if (treenode.get('objectid') == id && treenode.get('level') == 'C2')
                    return true;
            }, null, true);
            if (node === null){
                Ext.Msg.alert('Failed', 'Data update successfully, but cannot refresh the tree now, please refresh this webpage.');
                return;
            }
            var oldParent = tree.getRootNode().findChild('objectid', node.get('parentID'));
            //var node = oldParent.findChild('objectid',id);

            //比较seq和contegory1ID是不是有变化, 两者有一个变化则把该Node从原来parentNode下删除,
            //并根据修改后的category1ID(可能就是原来的category1ID)找到新的父节点,
            //再依据sequence插入对应的位置
            if ((node.get('parentID') != category1ID) || (node.get('sequence') != seq)){
                oldParent.removeChild(node);
                var newParent = tree.getRootNode().findChild('objectid',category1ID);
                //根据sequence找到大于等于seq的node, 作为插入位置
                var insertposition = newParent.childNodes.length;//default value using the biggest one
                for(var i = 0; i < newParent.childNodes.length; i++){
                    if (newParent.getChildAt(i).get('sequence') >= seq){
                        insertposition = i;
                        break;
                    }
                }
                newParent.insertChild(insertposition, node);
            }

            //设定名称
            node.set('chineseName', namecn);
            node.set('englishName', nameen);
            node.set('sequence',seq);
            node.set('parentID', category1ID);
        };

        var me =this;
        Ext.Ajax.request({
            url: "menu/update_category2",
            params : values,
            success: function(resp){
                var result = Ext.decode(resp.responseText);

                if(result.result =='ok'){
                    Ext.Msg.alert("SUCCESS","Update category2 successfully.");
                    //refresh tree
                    revalueNode();
                    //hide SAVE button and CANCEL button
                    me.showSaveCancelButtons(false);
                } else if (result.result =='invalid_session'){
                    digitalmenu.getApplication().onSessionExpired();
                } else {
                    Ext.Msg.alert('Failed',"Failed to update Category2.", resp.responseText);
                }
            },
            failure: function(resp){
                Ext.Msg.alert('Failed',"Failed to update Category2.", resp.responseText);
            }
        });
    },

    onSaveNewDishClick: function(button, e, eOpts) {
        var namecn = this.getTabDish().down('#tfDishCN').getValue();
        var nameen = this.getTabDish().down('#tfDishEN').getValue();
        var seq = this.getTabDish().down('#nfDishSeq').getValue();
        var price = this.getTabDish().down('#nfPrice').getValue();
        var isSpecial = this.getTabDish().down('#cbSpecial').getValue();
        var isNew = this.getTabDish().down('#cbNew').getValue();
        var hotLevel = this.getTabDish().down('#cbHotLevel').getValue();
        var category2ID = this.getTabDish().down('#cbCategory2ID').getValue();
        var abbr = this.getTabDish().down('#tfAbbreviation').getValue();
        //var fileName = this.getTabDish().down('#dishPicture').getValue();
        var tree = this.getTreeMenu();

        if (category2ID < 0){
            Ext.Msg.alert("Error", "Must select one Category2");
            return;
        }


        var values = {
            userId : Ext.util.Cookies.get("userId"),
            sessionId : Ext.util.Cookies.get("sessionId")
            //chineseName : namecn,
            //englishName : nameen,
            //sequence : seq,
            //price: price,
            //category2Id : category2ID,
            //image : image
        };

        //把保存成功的节点插入树中
        var addNewNode = function(newid, dishicon){
            //find category1 node
            var parentNode = tree.getRootNode().findChildBy(function(treenode){
                if (treenode.get('objectid') == category2ID && treenode.get('level') == 'C2'){
                    return true;
                }
            }, null, true);

            //根据sequence找到大于等于新节点的node, 作为插入位置
            var insertposition = parentNode.childNodes.length;//default value using the biggest one
            for(var i = 0; i < parentNode.childNodes.length; i++){
                if (parentNode.getChildAt(i).get('sequence') >= seq){
                    insertposition = i;
                    break;
                }
            }

            var displayTxt = namecn + (isSpecial? "<html><font color=red>[SPECIAL]</font></html>" : "") + (isNew? "<html><font color=red>[NEW]</font></html>" : "");
            parentNode.insertChild(insertposition, {
                objectid : newid,
                level : 'DISH',
                //iconCls : 'menutreenode-icon-size',
                //icon : dishicon,
                pictureName : dishicon,
                displayText : displayTxt,
                chineseName : namecn,
                englishName : nameen,
                parentID : category2ID,
                sequence : seq,
                price : price,
                isNew : isNew,
                isSpecial : isSpecial,
                hotLevel : hotLevel,
                abbreviation : abbr,
                leaf : true
            });
        };

        var me =this;
        //这里需要上传图片文件,只能使用form.submit方法
        button.up('form').submit({
            url: "menu/add_dish",
            params : values,
            success: function(form, action){
                var result = action.result;

                if(action.result.result =='ok'){
                    Ext.Msg.alert("SUCCESS","Create dish successfully.");
                    //insert new node
                    addNewNode(result.data.id, result.data.dishicon);
                    //hide SAVE button and CANCEL button
                    me.showSaveCancelButtons(false);
                } else if (action.result.result =='invalid_session'){
                    digitalmenu.getApplication().onSessionExpired();
                } else {
                    Ext.Msg.alert('Failed',"Failed to create dish.", action.result.result);
                }
            },
            failure: function(form, action){
                Ext.Msg.alert('Failed',"Failed to create dish.", action.result.result);
            }
        });
    },

    onSaveOldDishClick: function(button, e, eOpts) {
        var namecn = this.getTabDish().down('#tfDishCN').getValue();
        var nameen = this.getTabDish().down('#tfDishEN').getValue();
        var seq = this.getTabDish().down('#nfDishSeq').getValue();
        var id = this.getTabDish().down('#nfID').getValue();
        var price = this.getTabDish().down('#nfPrice').getValue();
        var isSpecial = this.getTabDish().down('#cbSpecial').getValue();
        var isNew = this.getTabDish().down('#cbNew').getValue();
        var hotLevel = this.getTabDish().down('#cbHotLevel').getValue();
        var category2ID = this.getTabDish().down('#cbCategory2ID').getValue();
        var abbr = this.getTabDish().down('#tfAbbreviation').getValue();
        var tree = this.getTreeMenu();

        if (category2ID < 0){
            Ext.Msg.alert("Error", "Must select one Category2");
            return;
        }

        var values = {
            userId : Ext.util.Cookies.get("userId"),
            sessionId : Ext.util.Cookies.get("sessionId"),
            chineseName : namecn,
            englishName : nameen,
            sequence : seq,
            price: price,
            id : id,
            isNew : isNew,
            isSpecial : isSpecial,
            hotLevel : hotLevel,
            category2Id : category2ID,
            abbreviation : abbr,
            pictureName : ""
        };

        //保存成功后重置node属性
        var revalueNode = function(){

            //根据ID找到当前Node以及修改前的parentNode
            var node = tree.getRootNode().findChildBy(function(treenode){
                if (treenode.get('objectid') == id && treenode.get('level') == 'DISH'){
                    return true;
                }
            }, null, true);
            var oldParent = tree.getRootNode().findChildBy(function(treenode){
                if (treenode.get('objectid') == node.get('parentID') && treenode.get('level') == 'C2'){
                    return true;
                }
            }, null, true);


            //比较seq和contegory2ID是不是有变化, 两者有一个变化则把该Node从原来parentNode下删除,
            //并根据修改后的category2ID(可能就是原来的category2ID)找到新的父节点,
            //再依据sequence插入对应的位置
            if ((node.get('parentID') != category2ID) || (node.get('sequence') != seq)){
                oldParent.removeChild(node);
                var newParent = tree.getRootNode().findChildBy(function(tn){
                    if (tn.get('objectid') == category2ID && tn.get('level') == 'C2'){
                        return true;
                    }
                }, null, true);

                //根据sequence找到大于等于seq的node, 作为插入位置
                var insertposition = newParent.childNodes.length;//default value using the biggest one
                for(var i = 0; i < newParent.childNodes.length; i++){
                    if (newParent.getChildAt(i).get('sequence') >= seq){
                        insertposition = i;
                        break;
                    }
                }
                newParent.insertChild(insertposition, node);
            }

            var displayTxt = namecn + (isSpecial? "<html><font color=red>[SPECIAL]</font></html>" : "") + (isNew? "<html><font color=red>[NEW]</font></html>" : "");

            //设定值
            node.set('displayText', displayTxt);
            node.set('chineseName', namecn);
            node.set('englishName', nameen);
            node.set('sequence',seq);
            node.set('price',price);
            node.set('isNew', isNew);
            node.set('isSpecial', isSpecial);
            node.set('hotLevel', hotLevel);
            node.set('parentID', category2ID);
            //node.pictureName =
        };

        var me =this;
        Ext.Ajax.request({
            url: "menu/update_dish",
            params : values,
            success: function(resp){
                var result = Ext.decode(resp.responseText);

                if(result.result =='ok'){
                    Ext.Msg.alert("SUCCESS","Update dish successfully.");
                    //refresh tree
                    revalueNode();
                    //hide SAVE button and CANCEL button
                    me.showSaveCancelButtons(false);
                } else if (result.result =='invalid_session'){
                    digitalmenu.getApplication().onSessionExpired();
                } else {
                    Ext.Msg.alert('Failed',"Failed to update dish.", resp.responseText);
                }
            },
            failure: function(resp){
                Ext.Msg.alert('Failed',"Failed to update dish.", resp.responseText);
            }
        });
    },

    onMenuTreeItemClick: function(dataview, record, item, index, e, eOpts) {
        //重置store并重新生成picker, 即下拉列表
        //this.setStoreForCategory1ComboBox();
        //this.getTabCategory2().down('#cbCategory1ID').createPicker();
        //this.setStoreForCategory2ComboBox();
        //this.getTabDish().down('#cbCategory2ID').createPicker();
        //set value
        this.showNodeInfoInForm(record);
    },

    onCancelCategory1Click: function(button, e, eOpts) {
        var me = this;
        Ext.MessageBox.confirm(
            "Confirm",
            "Will you give up all the data input in this form?",
            function(btnId){
                if (btnId == 'no')
                    return;
                //hide SAVE button and CANCEL button
                me.showSaveCancelButtons(false);
            }
        );


    },

    onCancelCategory2Click: function(button, e, eOpts) {
        var me = this;
        Ext.MessageBox.confirm(
            "Confirm",
            "Will you give up all the data input in this form?",
            function(btnId){
                if (btnId == 'no')
                    return;
                //hide SAVE button and CANCEL button
                me.showSaveCancelButtons(false);
            }
        );

    },

    onCancelDishClick: function(button, e, eOpts) {
        var me = this;
        Ext.MessageBox.confirm(
            "Confirm",
            "Will you give up all the data input in this form?",
            function(btnId){
                if (btnId == 'no')
                    return;
                //hide SAVE button and CANCEL button
                me.showSaveCancelButtons(false);
            }
        );

    },

    onFilefieldChange: function(filefield, value, eOpts) {
        console.log('enter already');
        filefield.up('panel').down('#image').setSrc(value);
    },

    onSaveDishPriceClick: function(button, e, eOpts) {
        var tree = this.getTreeMenu();
        //保存成功后重置node属性
        var revalueNode = function(dishid, newPrice){
            //find the dish node by id
            var c1nodes = tree.getRootNode().childNodes;
            breakTag:
            for(var i = 0; i< c1nodes.length; i++){
                var c2nodes = c1nodes[i].childNodes;
                for(var j = 0; j< c2nodes.length; j++){
                    var dishnodes = c2nodes[j].childNodes;
                    for (var k = 0; k< dishnodes.length; k++){
                        if(dishnodes[k].get('objectid') == dishid){
                            dishnodes[k].set('price', newPrice);
                            break breakTag;
                        }
                    }
                }
            }
        };
        var dishid = button.up('form').getValues().id;
        var price = button.up('form').getValues().newPrice;
        var successCallback = function(resp){
            var result = Ext.decode(resp.responseText);
            if(result.result ==='ok'){
                Ext.Msg.alert("SUCCESS","Change price successfully.");
                var win = button.up('form').up('window');
                win.close();
                revalueNode(dishid,price);
            } else if (result.result === 'invalid_session'){
                digitalmenu.getApplication().onSessionExpired();
            } else {
                Ext.Msg.alert('Failed', 'failed to change price, please do again');
            }
        };

        var failureCallback = function(resp){
            Ext.Msg.alert('Failed','failed to change price, please do again');
        };
        Ext.Ajax.request({
            url: 'menu/change_dish_price',
            params: {
                userId : Ext.util.Cookies.get('userId'),
                sessionId : Ext.util.Cookies.get('sessionId'),
                id : dishid,
                newPrice : price
            },
            success : successCallback,
            failure : failureCallback
        });
    },

    onSaveDishPictureClick: function(button, e, eOpts) {
        var dishid = button.up('form').getValues().id;
        var tree = this.getTreeMenu();
        //保存成功后重置node的picture信息, 由于浏览器有缓存, 所以图片保存后, 必须改变一下名字, 让浏览器重新获取图片
        var revalueNode = function(dishid, newPicture){
            //find the dish node by id
            var c1nodes = tree.getRootNode().childNodes;
            breakTag:
            for(var i = 0; i< c1nodes.length; i++){
                var c2nodes = c1nodes[i].childNodes;
                for(var j = 0; j< c2nodes.length; j++){
                    var dishnodes = c2nodes[j].childNodes;
                    for (var k = 0; k< dishnodes.length; k++){
                        if(dishnodes[k].get('objectid') == dishid){
                            dishnodes[k].set('pictureName', newPicture);
                            break breakTag;
                        }
                    }
                }
            }
        };

        var failureCallback = function(resp){
            Ext.Msg.alert('Failed','failed to change picture, please do again');
        };

        var successCallback = function(form, action){
                if(action.result.result =='ok'){
                    Ext.Msg.alert("SUCCESS","Change picture successfully.");
                    var win = button.up('form').up('window');
                    win.close();
                    revalueNode(dishid, action.result.data.dishicon);
                } else if (action.result.result =='invalid_session'){
                    digitalmenu.getApplication().onSessionExpired();
                } else {
                    Ext.Msg.alert('Failed',"Failed to change picture.", action.result.result);
                }
            };

        button.up('form').submit({
            url: 'menu/changedishpicture',
            params: {
                userId : Ext.util.Cookies.get('userId'),
                sessionId : Ext.util.Cookies.get('sessionId')
            },
            success : successCallback,
            failure : failureCallback
        });
    },

    showSaveCancelButtons: function(isShow) {
        if (isShow){
            this.getTabCategory1().down('#btnSaveNewCategory1').show();
            this.getTabCategory2().down('#btnSaveNewCategory2').show();
            this.getTabDish().down('#btnSaveNewDish').show();

            this.getTabCategory1().down('#btnSaveOldCategory1').show();
            this.getTabCategory2().down('#btnSaveOldCategory2').show();
            this.getTabDish().down('#btnSaveOldDish').show();

            this.getTabCategory1().down('#btnCancel').show();
            this.getTabCategory2().down('#btnCancel').show();
            this.getTabDish().down('#btnCancel').show();
        } else {
            this.getTabCategory1().down('#btnSaveNewCategory1').hide();
            this.getTabCategory2().down('#btnSaveNewCategory2').hide();
            this.getTabDish().down('#btnSaveNewDish').hide();

            this.getTabCategory1().down('#btnSaveOldCategory1').hide();
            this.getTabCategory2().down('#btnSaveOldCategory2').hide();
            this.getTabDish().down('#btnSaveOldDish').hide();

            this.getTabCategory1().down('#btnCancel').hide();
            this.getTabCategory2().down('#btnCancel').hide();
            this.getTabDish().down('#btnCancel').hide();
        }
    },

    cleanComponentValue: function() {
        //右侧的三个Tab页面的控件, 全部清空数据
        this.getTabCategory1().down('#nfID').setValue(0);
        this.getTabCategory1().down('#tfCategory1CN').setValue("");
        this.getTabCategory1().down('#tfCategory1EN').setValue("");
        this.getTabCategory1().down('#nfCategory1Seq').setValue("");

        this.getTabCategory2().down('#nfID').setValue(0);
        this.getTabCategory2().down('#tfCategory2CN').setValue("");
        this.getTabCategory2().down('#tfCategory2EN').setValue("");
        this.getTabCategory2().down('#nfCategory2Seq').setValue("");
        this.getTabCategory2().down('#cbCategory1ID').setValue("");

        this.getTabDish().down('#nfID').setValue(0);
        this.getTabDish().down('#tfDishCN').setValue("");
        this.getTabDish().down('#tfDishEN').setValue("");
        this.getTabDish().down('#nfDishSeq').setValue("");
        this.getTabDish().down('#cbCategory2ID').setValue("");
        this.getTabDish().down('#nfPrice').setValue(0);
        this.getTabDish().down('#image').setSrc(null);
        this.getTabDish().down('#cbNew').setValue(false);
        this.getTabDish().down('#cbSpecial').setValue(false);
        this.getTabDish().down('#cbHotLevel').setValue(0);
        this.getTabDish().down('#tfAbbreviation').setValue("");
    },

    setStoreForCategory1ComboBox: function() {
        //遍历tree, 搜集category1的数据存入数组
        var listCategory1 = [];
        var rootNode = this.getTreeMenu().getRootNode();
        if (rootNode !== null){
            var c1Nodes = rootNode.childNodes;
            if (c1Nodes !== null){
                for(var i = 0; i<c1Nodes.length; i++){
                    if (c1Nodes[i].get('id').substr(0,2) === 'C1'){
                        listCategory1.push([c1Nodes[i].get('id').substr(3,10), c1Nodes[i].get('chineseName')]);
                    }
                }
            }
        }

        //初始化category1 的下拉列表
        var storeCategory1 = Ext.create('Ext.data.ArrayStore', {
            fields: ['id', 'chineseName'],
            data: listCategory1
        });
        this.getTabCategory2().down('#cbCategory1ID').store = storeCategory1;
    },

    setStoreForCategory2ComboBox: function() {
        //遍历tree, 搜集category2的数据存入数组
        var listCategory2 = [];
        var rootNode = this.getTreeMenu().getRootNode();
        if (rootNode !== null){
            var c1Nodes = rootNode.childNodes;
            if (c1Nodes !== null){
                for(var i = 0; i<c1Nodes.length; i++){
                    if (c1Nodes[i].get('id').substr(0,2) === 'C1'){
                        var c2Nodes = c1Nodes[i].childNodes;
                        if (c2Nodes !== null){
                            for(var j = 0; j<c2Nodes.length; j++){
                                if (c2Nodes[j].get('id').substr(0,2) === 'C2'){
                                    listCategory2.push([c2Nodes[j].get('id').substr(3,10), c2Nodes[j].get('chineseName')]);
                                }
                            }
                        }
                    }
                }
            }
        }

        //初始化category2 的下拉列表
        var storeCategory2 = Ext.create('Ext.data.ArrayStore', {
            fields: ['id', 'chineseName'],
            data: listCategory2
        });
        this.getTabDish().down('#cbCategory2ID').store = storeCategory2;
    },

    showNodeInfoInForm: function(record) {
        if ('C1' == record.get('level')){
            this.getTabCategory1().up().setActiveTab(this.getTabCategory1());
            this.getTabCategory1().down('#nfID').setValue(record.get('objectid'));
            this.getTabCategory1().down('#tfCategory1CN').setValue(record.get('chineseName'));
            this.getTabCategory1().down('#tfCategory1EN').setValue(record.get('englishName'));
            this.getTabCategory1().down('#nfCategory1Seq').setValue(record.get('sequence'));
        } else if ('C2' == record.get('level')){
            this.getTabCategory2().up().setActiveTab(this.getTabCategory2());
            this.getTabCategory2().down('#nfID').setValue(record.get('objectid'));
            this.getTabCategory2().down('#tfCategory2CN').setValue(record.get('chineseName'));
            this.getTabCategory2().down('#tfCategory2EN').setValue(record.get('englishName'));
            this.getTabCategory2().down('#nfCategory2Seq').setValue(record.get('sequence'));
            this.getTabCategory2().down('#cbCategory1ID').setValue(record.get('parentID'));
            this.getTabCategory2().down('#cbPrinter').setValue(record.get('printerId'));
        } else if ('DISH' == record.get('level')){
            this.getTabDish().up().setActiveTab(this.getTabDish());
            this.getTabDish().down('#nfID').setValue(record.get('objectid'));
            this.getTabDish().down('#tfDishCN').setValue(record.get('chineseName'));
            this.getTabDish().down('#tfDishEN').setValue(record.get('englishName'));
            this.getTabDish().down('#nfDishSeq').setValue(record.get('sequence'));
            this.getTabDish().down('#nfPrice').setValue(record.get('price'));
            this.getTabDish().down('#cbCategory2ID').setValue(record.get('parentID'));
            this.getTabDish().down('#image').setSrc('../dishimage_big/'+record.get('pictureName'));
            this.getTabDish().down('#cbNew').setValue(record.get('isNew'));
            this.getTabDish().down('#cbSpecial').setValue(record.get('isSpecial'));
            this.getTabDish().down('#cbHotLevel').setValue(record.get('hotLevel'));
            this.getTabDish().down('#tfAbbreviation').setValue(record.get('abbreviation'));
        }

    },

    refreshNode: function(node) {

    },

    init: function(application) {
        this.control({
            "#menuContainer #btnAdd": {
                click: this.onAddMenuItemAction
            },
            "#menuContainer #btnModify": {
                click: this.onModifyMenuItemAction
            },
            "#menuContainer #btnDelete": {
                click: this.onDeleteMenuItemAction
            },
            "#menuContainer #btnSaveNewCategory1": {
                click: this.onSaveNewCategory1Click
            },
            "#menuContainer #btnSaveOldCategory1": {
                click: this.onSaveOldCategory1Click
            },
            "#menuContainer #btnSaveNewCategory2": {
                click: this.onSaveNewCategory2Click
            },
            "#menuContainer #tabCategory2 #btnSaveOldCategory2": {
                click: this.onSaveOldCategory2Click
            },
            "#menuContainer #btnSaveNewDish": {
                click: this.onSaveNewDishClick
            },
            "#menuContainer #btnSaveOldDish": {
                click: this.onSaveOldDishClick
            },
            "#menuContainer #treeMenu": {
                itemclick: this.onMenuTreeItemClick
            },
            "#menuContainer #tabCategory1 #btnCancel": {
                click: this.onCancelCategory1Click
            },
            "#menuContainer #tabCategory2 #btnCancel": {
                click: this.onCancelCategory2Click
            },
            "#menuContainer #tabDish #btnCancel": {
                click: this.onCancelDishClick
            },
            "#menuContainer #tabDish #filePicture": {
                change: this.onFilefieldChange
            },
            "#formChangeDishPrice #btnSave": {
                click: this.onSaveDishPriceClick
            },
            "#formChangeDishPicture #btnSave": {
                click: this.onSaveDishPictureClick
            }
        });
    }

});
